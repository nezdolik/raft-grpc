syntax = "proto3";


package raftmessaging;

service RaftMessenger {
    rpc AppendEntries (AppendEntriesRequest) returns (AppendEntriesResponse) {
    }

    rpc RequestVote (RequestVoteRequest) returns (RequestVoteResponse) {
    }
}

// Invoked by candidates to gather votes
message RequestVoteRequest {
    uint64 term = 1;
    uint64 leaderId = 2;
    uint64 lastLogIndex = 3;
    uint64 lastLogTerm = 4;
}

// Invoked by leader to replicate log entries; also used as hearbeat
message AppendEntriesRequest {
    uint64 term = 1;
    uint64 leaderId = 2;
    uint64 prevLogIndex = 3;
    uint64 prevLogTerm = 4;
    repeated LogEntry entries = 5;
    uint64 leaderCommit = 6;

}

message RequestVoteResponse {
    uint64 term = 1;
    bool voteGranted = 2;
}

message AppendEntriesResponse {
    uint64 term = 1;
    bool success = 2;
}


message LogEntry {
    //TODO uint64 key = 1;
    bytes buff = 2;
}